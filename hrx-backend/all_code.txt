
// --- D:\App\MunshiHR Application\hrx-backend\src\app.js ---
// --- D:\App\MunshiHR Application\hrx-backend\src\app.js ---
const express = require("express");
const cors = require("cors");
const authRoutes = require("./routes/authRoutes");
const otpRoutes = require("./routes/otpRoutes");
const userRoutes = require("./routes/userRoutes");
const employeeRoutes = require("./routes/employeeRoutes"); // Import the new employee routes
const attendanceRoutes = require("./routes/attendanceRoutes"); // Import the attendance routes

const logger = require("./utils/logger");

const app = express();

app.use(cors());
app.use(express.json());

// Routes
app.use("/api/auth", authRoutes);
app.use("/api/otp", otpRoutes);
app.use("/api/user", userRoutes);
app.use("/api/employees", employeeRoutes); // Register the new route
app.use("/api/attendance", attendanceRoutes); // Register the attendance route

// Error handling middleware
app.use((err, req, res, next) => {
  logger.error(`Unhandled error: ${err.message}`);
  res.status(500).json({ error: "Internal server error" });
});

module.exports = app;



// --- D:\App\MunshiHR Application\hrx-backend\src\config\db.js ---
const { Pool } = require("pg");
require("dotenv").config();

const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_DATABASE,
  password: process.env.DB_PASSWORD,
  port: process.env.DB_PORT,
});

module.exports = pool;


// --- D:\App\MunshiHR Application\hrx-backend\src\config\mailer.js ---
const nodemailer = require("nodemailer");
require("dotenv").config();

const transporter = nodemailer.createTransport({
  host: process.env.MAILTRAP_HOST,
  port: process.env.MAILTRAP_PORT,
  secure: true,
  auth: {
    user: process.env.MAILTRAP_USER,
    pass: process.env.MAILTRAP_PASS,
  },
});

module.exports = transporter;


// --- D:\App\MunshiHR Application\hrx-backend\src\controllers\attendanceController.js ---
// --- D:\App\MunshiHR Application\hrx-backend\src\controllers/attendanceController.js ---

const User = require("../models/User");
const logger = require("../utils/logger");

const attendanceController = {
  async getAttendanceHistory(req, res) {
    const { employee_id } = req.params; // Only accept employee_id

    if (!employee_id) {
      logger.warn("Employee ID is required");
      return res.status(400).json({ error: "Employee ID is required" });
    }

    try {
      const attendanceHistory = await User.findAttendanceHistoryByEmployeeId(employee_id);

      if (attendanceHistory.length === 0) {
        logger.info(`No attendance history found for employee ID: ${employee_id}`);
        // Return 200 OK with a message instead of 404
        return res.status(200).json({ message: "No attendance history found" });
      }

      logger.info(`Found ${attendanceHistory.length} attendance records for employee ID: ${employee_id}`);
      res.json(attendanceHistory);
    } catch (error) {
      logger.error(`Error fetching attendance history for employee ID ${employee_id}: ${error.message}`);
      res.status(500).json({ error: "Internal server error" });
    }
  }
};

module.exports = attendanceController;



// --- D:\App\MunshiHR Application\hrx-backend\src\controllers\authController.js ---
const User = require("../models/User");
const { hashPassword, verifyPassword } = require("../utils/passwordUtils");
const { generateToken } = require("../utils/jwtUtils");
const logger = require("../utils/logger");

const authController = {
  async checkUser(req, res) {
    const { email } = req.body;

    if (!email) {
      logger.warn("Email is required");
      return res.status(400).json({ error: "Email is required" });
    }

    logger.info(`Checking user with email: ${email}`);

    try {
      const user = await User.findByEmail(email);
      if (!user) {
        logger.warn(`User not found: ${email}`);
        return res.status(404).json({ error: "User not found" });
      }

      const passwordExists = user.password !== null;
      res.json({ passwordExists });
    } catch (error) {
      logger.error(`Error checking user: ${error}`);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  async login(req, res) {
    const { email, password } = req.body;

    if (!email || !password) {
      logger.warn("Email and password are required");
      return res.status(400).json({ error: "Email and password are required" });
    }

    logger.info(`Login attempt for email: ${email}`);

    try {
      const user = await User.findByEmail(email);
      if (!user) {
        logger.warn(`User not found: ${email}`);
        return res.status(404).json({ error: "User not found" });
      }

      const isPasswordMatch = verifyPassword(password, user.name, user.id, user.password);
      if (!isPasswordMatch) {
        logger.warn(`Invalid password for email: ${email}`);
        return res.status(401).json({ error: "Invalid password" });
      }

      const token = generateToken({ id: user.id, email: user.work_email });
      logger.info(`Login successful for email: ${email}`);
      res.json({ token });
    } catch (error) {
      logger.error(`Error during login: ${error}`);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  async setPassword(req, res) {
    const { email, newPassword } = req.body;

    if (!email || !newPassword) {
      logger.warn("Email and new password are required");
      return res.status(400).json({ error: "Email and new password are required" });
    }

    logger.info(`Setting new password for email: ${email}`);

    try {
      const user = await User.findByEmail(email);
      if (!user) {
        logger.warn(`User not found: ${email}`);
        return res.status(404).json({ error: "User not found" });
      }

      const passwordHash = hashPassword(newPassword, user.name, user.id);
      await User.updatePassword(email, passwordHash);

      const token = generateToken({ email });
      logger.info(`Password set successfully for email: ${email}`);
      res.json({ token });
    } catch (error) {
      logger.error(`Error setting password: ${error}`);
      res.status(500).json({ error: "Internal server error" });
    }
  },
  async logout(req, res) {
    try {
      // In a real-world scenario, you might invalidate the token here (e.g., using a blacklist or Redis).
      // For now, we'll just return a success message.
      logger.info(`User logged out`);
      res.json({ message: "Logged out successfully" });
    } catch (error) {
      logger.error(`Error during logout: ${error}`);
      res.status(500).json({ error: "Internal server error" });
    }
  },
  async validateToken(req, res) {
    const { token } = req.body;

    if (!token) {
      logger.warn("No token provided for validation");
      return res.json({ valid: false });
    }

    try {
      const decoded = verifyToken(token);
      const user = await User.findByEmail(decoded.email);
      
      if (!user) {
        logger.warn(`User not found for token validation: ${decoded.email}`);
        return res.json({ valid: false });
      }

      logger.info(`Token validated successfully for user: ${decoded.email}`);
      return res.json({ valid: true });
    } catch (error) {
      logger.warn(`Token validation failed: ${error.message}`);
      return res.json({ valid: false });
    }
  },
};

module.exports = authController;


// --- D:\App\MunshiHR Application\hrx-backend\src\controllers\employeeController.js ---
// --- D:\App\MunshiHR Application\hrx-backend\src\controllers\employeeController.js ---
const User = require("../models/User");
const logger = require("../utils/logger");

const employeeController = {
  async getEmployeesBySupervisor(req, res) {
    const { supervisor_id } = req.params; // supervisor_id is passed as a URL parameter

    if (!supervisor_id) {
      logger.warn("Supervisor ID is required");
      return res.status(400).json({ error: "Supervisor ID is required" });
    }

    try {
      const employees = await User.findBySupervisor(supervisor_id);

      logger.info(`Found ${employees.length} employee(s) for supervisor ID: ${supervisor_id}`);
      res.json(employees);
    } catch (error) {
      logger.error(`Error fetching employees for supervisor ${supervisor_id}: ${error.message}`);
      res.status(500).json({ error: "Internal server error" });
    }
  },
    async getAttendanceHistory(req, res) {
    const { employee_id, user_id } = req.params; // Check for employee_id or user_id as parameters

    if (!employee_id && !user_id) {
      logger.warn("Employee ID or User ID is required");
      return res.status(400).json({ error: "Employee ID or User ID is required" });
    }

    const id = employee_id || user_id; // Use the provided ID (employee_id or user_id)

    try {
      const attendanceHistory = await User.getAttendanceHistory(id);

      if (attendanceHistory.length === 0) {
        logger.info(`No attendance history found for ID: ${id}`);
        return res.status(404).json({ message: "No attendance history found" });
      }

      logger.info(`Found ${attendanceHistory.length} attendance record(s) for ID: ${id}`);
      res.json(attendanceHistory);
    } catch (error) {
      logger.error(`Error fetching attendance history for ID ${id}: ${error.message}`);
      res.status(500).json({ error: "Internal server error" });
    }
  }
};

module.exports = employeeController;



// --- D:\App\MunshiHR Application\hrx-backend\src\controllers\otpController.js ---
const User = require("../models/User");
const { sendEmail } = require("../services/mailService");
const crypto = require("crypto");
const logger = require("../utils/logger");

const otpController = {
  async sendOTP(req, res) {
    const { email } = req.body;

    if (!email) {
      logger.warn("Email is required");
      return res.status(400).json({ error: "Email is required" });
    }

    logger.info(`Sending OTP to email: ${email}`);

    try {
      const user = await User.findByEmail(email);
      if (!user) {
        logger.warn(`User not found: ${email}`);
        return res.status(404).json({ error: "User not found" });
      }

      const otp = crypto.randomInt(100000, 999999).toString();
      const expiresAt = new Date(Date.now() + 15 * 60 * 1000); // OTP expires in 15 minutes

      await User.createOTP(email, otp, expiresAt);
      await sendEmail(email, "Your OTP for Password Reset", `Your OTP is: ${otp}`);

      logger.info(`OTP sent to ${email} ${otp}`);
      res.json({ message: "OTP sent" });
    } catch (error) {
      logger.error(`Error sending OTP: ${error}`);
      res.status(500).json({ error: "Internal server error" });
    }
  },

  async verifyOTP(req, res) {
    const { email, otp } = req.body;

    if (!email || !otp) {
      logger.warn("Email and OTP are required");
      return res.status(400).json({ error: "Email and OTP are required" });
    }

    logger.info(`Verifying OTP for email: ${email}`);

    try {
      const otpData = await User.verifyOTP(email, otp);
      if (!otpData || otpData.otp !== otp || new Date() > otpData.expires_at) {
        logger.warn(`Invalid OTP or OTP expired for email: ${email}`);
        return res.status(400).json({ error: "Invalid OTP or OTP expired" });
      }

      logger.info(`OTP verified for email: ${email}`);
      res.json({ message: "OTP verified" });
    } catch (error) {
      logger.error(`Error verifying OTP: ${error}`);
      res.status(500).json({ error: "Internal server error" });
    }
  },
};

module.exports = otpController;


// --- D:\App\MunshiHR Application\hrx-backend\src\controllers\userController.js ---
const User = require("../models/User");
const { verifyToken } = require("../utils/jwtUtils");
const logger = require("../utils/logger");

const userController = {
  async getProfile(req, res) {
    try {
      const { email } = req.user;

      const user = await User.findByEmail(email);
      if (!user) {
        logger.warn(`User not found: ${email}`);
        return res.status(404).json({ error: "User not found" });
      }

      // Sanitize user data before sending
      const userProfile = {
        id: user.id,
        name: user.name,
        email: user.work_email,
        job_title: user.job_title,
        phoneNumber: user.work_phone,
        marital: user.marital,
        gender: user.gender,
        birthday: user.birthday
      };

      logger.info(`Profile data fetched for user: ${email}`);
      res.json(userProfile);
    } catch (error) {
      logger.error(`Error fetching user profile: ${error}`);
      res.status(500).json({ error: "Internal server error" });
    }
  }
};

module.exports = userController;


// --- D:\App\MunshiHR Application\hrx-backend\src\middleware\authMiddleware.js ---
const { verifyToken } = require("../utils/jwtUtils");
const logger = require("../utils/logger");

const authMiddleware = (req, res, next) => {
  try {
    const authHeader = req.header("Authorization");
    
    if (!authHeader) {
      logger.warn("No Authorization header present");
      return res.status(401).json({ error: "Authorization header required" });
    }

    if (!authHeader.startsWith("Bearer ")) {
      logger.warn("Invalid Authorization header format");
      return res.status(401).json({ error: "Invalid authorization format" });
    }

    const token = authHeader.replace("Bearer ", "");
    const decoded = verifyToken(token);
    req.user = decoded;
    next();
  } catch (error) {
    logger.error(`Authentication error: ${error.message}`);
    res.status(401).json({ error: "Invalid or expired token" });
  }
};

module.exports = authMiddleware;


// --- D:\App\MunshiHR Application\hrx-backend\src\models\User.js ---
// --- D:\App\MunshiHR Application\hrx-backend\src\models\User.js ---
const pool = require("../config/db");

const User = {
  async findByEmail(email) {
    const result = await pool.query(
      `SELECT 
        id, 
        name, 
        work_email,
        password,
        job_title,
        work_phone,
        marital,
        gender,
        birthday
      FROM hr_employee 
      WHERE work_email = $1`,
      [email]
    );
    return result.rows[0];
  },

  async updatePassword(email, passwordHash) {
    await pool.query(
      "UPDATE hr_employee SET password = $1 WHERE work_email = $2",
      [passwordHash, email]
    );
  },

  async createOTP(email, otp, expiresAt) {
    const existingOTP = await pool.query(
      "SELECT * FROM hr_user_mobile_otps WHERE username = $1",
      [email]
    );

    if (existingOTP.rows.length > 0) {
      await pool.query(
        "UPDATE hr_user_mobile_otps SET otp = $1, expires_at = $2 WHERE username = $3",
        [otp, expiresAt, email]
      );
    } else {
      await pool.query(
        "INSERT INTO hr_user_mobile_otps (username, otp, expires_at) VALUES ($1, $2, $3)",
        [email, otp, expiresAt]
      );
    }
  },

  async verifyOTP(email, otp) {
    const result = await pool.query(
      "SELECT otp, expires_at FROM hr_user_mobile_otps WHERE username = $1",
      [email]
    );
    return result.rows[0];
  },

  // New method: Find employees by supervisor ID
  async findBySupervisor(supervisorId) {
    const result = await pool.query(
      `SELECT 
         id, 
         name, 
         work_email,
         job_title,
         work_phone,
         mobile_phone,
         department_id,
         supervisor_id,
         create_date,
         write_date
       FROM hr_employee
       WHERE supervisor_id = $1`,
      [supervisorId]
    );
    return result.rows;
  },
  async findAttendanceHistoryByEmployeeId(employeeId) {
    const result = await pool.query(
      `SELECT 
         id, 
         employee_id, 
         check_in, 
         check_out, 
         worked_hours, 
         overtime_hours,
         in_country_name, 
         in_city, 
         in_ip_address, 
         in_browser, 
         in_mode, 
         out_country_name, 
         out_city, 
         out_ip_address, 
         out_browser, 
         out_mode,
         in_latitude, 
         in_longitude, 
         out_latitude, 
         out_longitude, 
         create_date, 
         write_date
       FROM hr_attendance
       WHERE employee_id = $1
       ORDER BY check_in DESC`,
      [employeeId]
    );
    return result.rows;
  }
};

module.exports = User;



// --- D:\App\MunshiHR Application\hrx-backend\src\routes\attendanceRoutes.js ---
// --- D:\App\MunshiHR Application\hrx-backend\src\routes/attendanceRoutes.js ---

const express = require("express");
const attendanceController = require("../controllers/attendanceController");

const router = express.Router();

// GET route to retrieve attendance history by employee_id
// Example: GET /api/attendance/history/employee/126
router.get("/history/employee/:employee_id", attendanceController.getAttendanceHistory);

module.exports = router;



// --- D:\App\MunshiHR Application\hrx-backend\src\routes\authRoutes.js ---
const express = require("express");
const authController = require("../controllers/authController");

const router = express.Router();

router.post("/checkuser", authController.checkUser);
router.post("/login", authController.login);
router.post("/setpassword", authController.setPassword);
router.post("/logout", authController.logout);
router.post("/validate", authController.validateToken);

module.exports = router;


// --- D:\App\MunshiHR Application\hrx-backend\src\routes\employeeRoutes.js ---
// --- D:\App\MunshiHR Application\hrx-backend\src\routes\employeeRoutes.js ---
const express = require("express");
const employeeController = require("../controllers/employeeController");

const router = express.Router();


router.get("/supervisor/:supervisor_id", employeeController.getEmployeesBySupervisor);

module.exports = router;



// --- D:\App\MunshiHR Application\hrx-backend\src\routes\otpRoutes.js ---
const express = require("express");
const otpController = require("../controllers/otpController");

const router = express.Router();

router.post("/sendotp", otpController.sendOTP);
router.post("/verifyotp", otpController.verifyOTP);

module.exports = router;


// --- D:\App\MunshiHR Application\hrx-backend\src\routes\userRoutes.js ---
const express = require("express");
const authMiddleware = require("../middleware/authMiddleware");
const userController = require("../controllers/userController");

const router = express.Router();

// Changed from /userdata to /profile to match frontend
router.get("/profile", authMiddleware, userController.getProfile);

module.exports = router;


// --- D:\App\MunshiHR Application\hrx-backend\src\server.js ---
const app = require('./app');
const port = process.env.PORT;

app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});


// --- D:\App\MunshiHR Application\hrx-backend\src\services\mailService.js ---
const transporter = require("../config/mailer");

const sendEmail = async (to, subject, text) => {
  const mailOptions = {
    from: process.env.MAIL_FROM,
    to,
    subject,
    text,
  };

  await transporter.sendMail(mailOptions);
};

module.exports = { sendEmail };


// --- D:\App\MunshiHR Application\hrx-backend\src\utils\jwtUtils.js ---
const jwt = require("jsonwebtoken");
require("dotenv").config();

const generateToken = (payload) => {
  return jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: "10h" });
};

const verifyToken = (token) => {
  return jwt.verify(token, process.env.JWT_SECRET);
};

module.exports = { generateToken, verifyToken };


// --- D:\App\MunshiHR Application\hrx-backend\src\utils\logger.js ---
const logger = {
    info: (message) => console.log(`[INFO] ${message}`),
    warn: (message) => console.warn(`[WARN] ${message}`),
    error: (message) => console.error(`[ERROR] ${message}`),
  };
  
  module.exports = logger;


// --- D:\App\MunshiHR Application\hrx-backend\src\utils\passwordUtils.js ---
const crypto = require("crypto");

const hashPassword = (password, name, id) => {
  const salt = `${name}${id}`;
  const iterations = 600000;
  const keylen = 64; // 512 bits
  const digest = "sha512";

  const hash = crypto.pbkdf2Sync(password, salt, iterations, keylen, digest);
  return hash.toString("hex");
};

const verifyPassword = (inputPassword, name, id, storedHash) => {
  if (typeof inputPassword !== "string") {
    throw new TypeError("The password must be a string");
  }

  const inputHash = hashPassword(inputPassword, name, id);
  return inputHash === storedHash;
};

module.exports = { hashPassword, verifyPassword };

